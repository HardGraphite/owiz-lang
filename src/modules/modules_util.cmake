include_guard(DIRECTORY)

if(NOT DEFINED OW_AVAILABLE_MODULES)
    message(FATAL_ERROR "`OW_AVAILABLE_MODULES` is not defined.")
endif()
if(NOT DEFINED OW_REQUIRED_MODULES)
    message(FATAL_ERROR "`OW_REQUIRED_MODULES` is not defined.")
endif()
if(NOT DEFINED OW_PRFDYN_MODULES)
    message(FATAL_ERROR "`OW_PRFDYN_MODULES` is not defined.")
endif()

# Doc string about conf_list.
set(ow_mod_util_conf_list_doc
    "`*' represents all modules; `%' represents modules that are dynamic by default; prefix `-' means disable this module.")

# Parse conf_list and make a list.
function(ow_mod_util_process_conf_list conf_list result_var)
    set(result_list)
    foreach(entry IN LISTS conf_list)
        if(entry STREQUAL "*")
            list(APPEND result_list ${OW_AVAILABLE_MODULES})
        elseif(entry STREQUAL "%")
            list(APPEND result_list ${OW_PRFDYN_MODULES})
        elseif(entry STREQUAL "-%")
            list(REMOVE_ITEM result_list ${OW_PRFDYN_MODULES})
        elseif(entry MATCHES "^-(.+)")
            list(REMOVE_ITEM result_list ${CMAKE_MATCH_1})
        else()
            list(FIND OW_AVAILABLE_MODULES ${entry} index)
            if(index EQUAL -1)
                message(FATAL_ERROR "Cannot find module `${entry}'.")
            else()
                list(APPEND result_list ${entry})
            endif()
        endif()
    endforeach()
    set(dep_list)
    foreach(name IN LISTS result_list)
        set(dep_mods_var "OW_MOD_${name}_DEP_MODS")
        if(DEFINED ${dep_mods_var})
            set(dep_mods ${${dep_mods_var}})
            list(APPEND dep_list ${dep_mods})
        endif()
    endforeach()
    list(APPEND result_list ${dep_list})
    list(REMOVE_DUPLICATES result_list)
    set(${result_var} ${result_list} PARENT_SCOPE)
endfunction()

# List embedded modules.
function(ow_mod_util_collect_embedded_modules conf_list out_var)
    list(APPEND conf_list ${OW_REQUIRED_MODULES})
    ow_mod_util_process_conf_list("${conf_list}" result)
    set(${out_var} ${result} PARENT_SCOPE)
endfunction()

# List dynamic modules.
function(ow_mod_util_collect_dynamic_modules conf_list out_var)
    ow_mod_util_process_conf_list("${conf_list}" result)
    foreach(name IN LISTS result)
        if(${OW_MOD_${name}_MUST_EMBED})
            message(FATAL_ERROR "Module `${name}' must be embedded.")
        endif()
    endforeach()
    set(${out_var} ${result} PARENT_SCOPE)
endfunction()

# Add source files for a module.
function(ow_mod_util_add_sources target scope mod_name)
    set(base_dir "${CMAKE_SOURCE_DIR}/src/modules")
    set(sources_var "OW_MOD_${mod_name}_SOURCES")
    if(DEFINED ${sources_var})
        set(sources ${${sources_var}})
        set(sources_full_path)
        foreach(path IN LISTS sources)
            list(APPEND sources_full_path "${base_dir}/${path}")
        endforeach()
        set(path ${sources_full_path})
    elseif(IS_DIRECTORY "${base_dir}/${mod_name}")
        aux_source_directory("${base_dir}/${mod_name}" sources)
    elseif(EXISTS "${base_dir}/${mod_name}.c")
        set(sources "${base_dir}/${mod_name}.c")
    else()
        message(FATAL_ERROR "Cannot find source file for module `${mod_name}'.")
    endif()
    target_sources(${target} ${scope} ${sources})
endfunction()

# Link libraries for a module.
function(ow_mod_util_link_libraries target scope mod_name)
    set(link_libs_var "OW_MOD_${mod_name}_LINK_LIBS")
    if(DEFINED ${link_libs_var})
        set(link_libs ${${link_libs_var}})
        target_link_libraries(${target} ${scope} ${link_libs})
    endif()
endfunction()
